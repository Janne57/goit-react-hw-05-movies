{"version":3,"file":"static/js/824.e96b2098.chunk.js","mappings":"mLACA,EAAyB,uB,SCkBzB,EAhBe,WACX,OACI,iBAAKA,UAAWC,EAAhB,WACE,uBAAG,gBACH,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,eAIhE,C,mHCjBD,EAAsB,0BAAtB,EAA4D,gCAA5D,EAA2G,mCAA3G,EAAoJ,0B,kBCsFpJ,EAjFqB,WAAO,IAAD,EACzB,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEjB,GAA0CN,EAAAA,EAAAA,UAAS,IAAnD,eAAOO,EAAP,KAAsBC,EAAtB,KACA,GAAsCR,EAAAA,EAAAA,UAAS,GAA/C,eAAOS,EAAP,KAAoBC,EAApB,KACA,GAAoCV,EAAAA,EAAAA,UAAS,IAA7C,eAAOW,EAAP,KAAmBC,EAAnB,KACA,GAAsCZ,EAAAA,EAAAA,UAAS,GAA/C,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAAgCd,EAAAA,EAAAA,UAAS,IAAzC,eAAOe,EAAP,KAAiBC,EAAjB,KACA,GAA4BhB,EAAAA,EAAAA,UAAS,IAArC,eAAOiB,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACRjB,GAAa,GACb,IACEkB,MAAM,sCAAD,OACmCjB,EADnC,8CAGFkB,MAAK,SAAAC,GACJ,OAAOA,EAASC,MACjB,IACAF,MAAK,SAAAC,GAGJd,EAAiBc,EAASE,gBAC1Bd,EAAeY,EAASG,cACxBf,EAAeY,EAASG,cACxBb,EAAcU,EAASI,aACvBZ,EAAeQ,EAASK,cACxBX,EAAYM,EAASM,UACrBV,GAAU,OAAIW,EAAoBP,EAASL,SAC5C,GAIJ,CAHC,MAAOa,GACR,CAnBD,QAoBE5B,GAAa,EACd,CACF,GAAE,CAACC,IAEJ,IAAM0B,EAAsB,SAAAE,GAC1B,OAAOA,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IAAeC,KAAK,IAC1C,EAID,OACE,4BAEE,SAAC,KAAD,CAAMC,IAAI,UAAA/B,EAASgC,aAAT,eAAgBC,OAAQ,IAAK/C,UAAWC,EAAlD,SAA2D,YAG1DS,IAAa,SAACsC,EAAA,EAAD,KACd,gBACEhD,UAAWC,EACXgD,IAAG,0CAAqC7B,GACxC8B,IAAG,uBAEL,wBAAKlC,KACL,yBAAG,IAAEmC,SAASjC,GAAa,QAC3B,yBAAG,eAAH,UAAmBkC,KAAKC,MAAoB,GAAd/B,IAAoB,QAClD,cAAGtB,UAAWC,EAAd,SAA6B,cAC7B,yBAAG,IAAEuB,EAAS,QACd,cAAGxB,UAAWC,EAAd,SAA6B,YAC7B,yBAAG,IAAEyB,EAAO,QACZ,eAAI1B,UAAWC,EAAf,SAA8B,2BAC9B,2BACE,yBACE,SAAC,KAAD,CAAM4C,GAAG,OAAO7C,UAAWC,EAA3B,SAA6C,YAI/C,yBACE,SAAC,KAAD,CAAM4C,GAAG,UAAU7C,UAAWC,EAA9B,SAAgD,kBAKpD,SAAC,KAAD,MAGL,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader.module.css?9d64","components/Loader.js","webpack://goit-react-hw-05-movies/./src/pages/MovieDetails.module.css?6cd2","pages/MovieDetails.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"spiner\":\"Loader_spiner__xTnPT\"};","import { ColorRing } from 'react-loader-spinner';\nimport css from '..//components/Loader.module.css'\n\nconst Loader = () =>{\n    return (\n        <div className={css.spiner}>\n          <p>LOADING...</p>\n          <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n          />\n        </div>\n      )\n}\nexport default Loader;","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"MovieDetails_img__WWAoB\",\"text__add\":\"MovieDetails_text__add__1AcB0\",\"text__second\":\"MovieDetails_text__second__soA8z\",\"btn\":\"MovieDetails_btn__t5pTm\"};","import { useParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Link, Outlet } from 'react-router-dom';\nimport css from '../pages/MovieDetails.module.css';\nimport Loader from 'components/Loader.js';\n\nconst MovieDetails = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  // const backLinkLocationRef = useRef(location.state?.from ?? '/');\n  const [originalTitle, setOriginalTitle] = useState('');\n  const [releaseDate, setReleaseDate] = useState(0);\n  const [posterPath, setPosterPath] = useState('');\n  const [voteAverage, setVoteAverage] = useState(0);\n  const [overView, setOverView] = useState('');\n  const [genres, setGenres] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    try {\n      fetch(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=356db60679791a010148fefe0790ebd1`\n      )\n        .then(response => {\n          return response.json();\n        })\n        .then(response => {\n          // console.log(response);\n          // setDataMovie(response);\n          setOriginalTitle(response.original_title);\n          setReleaseDate(response.release_date);\n          setReleaseDate(response.release_date);\n          setPosterPath(response.poster_path);\n          setVoteAverage(response.vote_average);\n          setOverView(response.overview);\n          setGenres([...getNormalizedGenres(response.genres)]);\n        });\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  }, [movieId]);\n\n  const getNormalizedGenres = array => {\n    return array.map(item => item.name).join(' ');\n  };\n\n  // console.log('location', location);\n\n  return (\n    <div>\n      {/* <Link to={backLinkLocationRef.current} className={css.btn}> */}\n      <Link to={location.state?.from || '/'} className={css.btn}>\n        Go back\n      </Link>\n      {isLoading && <Loader />}\n      <img\n        className={css.img}\n        src={`https://image.tmdb.org/t/p/w500/${posterPath}`}\n        alt={`{originalTitle  }`}\n      />\n      <h1>{originalTitle}</h1>\n      <p>({parseInt(releaseDate)})</p>\n      <p>User score: {`${Math.round(voteAverage * 10)}`}%</p>\n      <p className={css.text__add}>Overview</p>\n      <p>({overView})</p>\n      <p className={css.text__add}>Genres</p>\n      <p>({genres})</p>\n      <h2 className={css.text__add}>Additinal information</h2>\n      <ul>\n        <li>\n          <Link to=\"cast\" className={css.text__second}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" className={css.text__second}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["className","css","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","useState","isLoading","setIsLoading","movieId","useParams","location","useLocation","originalTitle","setOriginalTitle","releaseDate","setReleaseDate","posterPath","setPosterPath","voteAverage","setVoteAverage","overView","setOverView","genres","setGenres","useEffect","fetch","then","response","json","original_title","release_date","poster_path","vote_average","overview","getNormalizedGenres","error","array","map","item","name","join","to","state","from","Loader","src","alt","parseInt","Math","round"],"sourceRoot":""}