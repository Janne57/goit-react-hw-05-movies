{"version":3,"file":"static/js/824.1fc6a316.chunk.js","mappings":"mLACA,EAAyB,uB,SCmBzB,EAhBe,WACX,OACI,iBAAKA,UAAWC,EAAhB,WACE,uBAAG,gBACH,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,eAIhE,C,mHClBD,EAAsB,0B,kBCwFtB,EAjFqB,WAAO,IAAD,IACzB,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAE3D,GAA0CV,EAAAA,EAAAA,UAAS,IAAnD,eAAOW,EAAP,KAAsBC,EAAtB,KACA,GAAsCZ,EAAAA,EAAAA,UAAS,GAA/C,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAAoCd,EAAAA,EAAAA,UAAS,IAA7C,eAAOe,EAAP,KAAmBC,EAAnB,KACA,GAAsChB,EAAAA,EAAAA,UAAS,GAA/C,eAAOiB,EAAP,KAAoBC,EAApB,KACA,GAAgClB,EAAAA,EAAAA,UAAS,IAAzC,eAAOmB,EAAP,KAAiBC,EAAjB,KACA,GAA4BpB,EAAAA,EAAAA,UAAS,IAArC,eAAOqB,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACRrB,GAAa,GACb,IACEsB,MAAM,sCAAD,OACmCrB,EADnC,8CAGFsB,MAAK,SAAAC,GACJ,OAAOA,EAASC,MACjB,IACAF,MAAK,SAAAC,GAGJd,EAAiBc,EAASE,gBAC1Bd,EAAeY,EAASG,cACxBf,EAAeY,EAASG,cACxBb,EAAcU,EAASI,aACvBZ,EAAeQ,EAASK,cACxBX,EAAYM,EAASM,UACrBV,GAAU,OAAIW,EAAoBP,EAASL,SAI5C,GAIJ,CAHC,MAAOa,GACR,CAtBD,QAuBEhC,GAAa,EACd,CACF,GAAE,CAACC,IAEJ,IAAM8B,EAAsB,SAAAE,GAC1B,OAAOA,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IAAeC,KAAK,IAC1C,EAKD,OAHAC,QAAQC,IAAI,WAAYpC,IAMtB,4BACE,SAAC,KAAD,CAAMqC,GAAInC,EAAoBoC,QAA9B,SAAuC,YACtC1C,IAAa,SAAC2C,EAAA,EAAD,KACd,gBACErD,UAAWC,EACXqD,IAAG,0CAAqC9B,GACxC+B,IAAG,uBAEL,wBAAKnC,KACL,yBAAG,IAAEoC,SAASlC,GAAa,QAC3B,yBAAG,eAAH,UAAmBmC,KAAKC,MAAoB,GAAdhC,IAAoB,QAClD,uBAAG,cACH,yBAAG,IAAEE,EAAS,QACd,uBAAG,YACH,yBAAG,IAAEE,EAAO,QACZ,wBAAI,2BACJ,2BACE,yBACE,SAAC,KAAD,CAAMqB,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,WAAT,SAAoB,kBAGxB,SAAC,KAAD,MAGL,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader.module.css?9d64","components/Loader.js","webpack://goit-react-hw-05-movies/./src/pages/MovieDetails.module.css?6cd2","pages/MovieDetails.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"spiner\":\"Loader_spiner__xTnPT\"};","// import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport { ColorRing } from 'react-loader-spinner';\nimport css from '..//components/Loader.module.css'\n\nconst Loader = () =>{\n    return (\n        <div className={css.spiner}>\n          <p>LOADING...</p>\n          <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n          />\n        </div>\n      )\n}\nexport default Loader;","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"MovieDetails_img__WWAoB\"};","import { useParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useRef } from 'react';\nimport { Link, Outlet } from 'react-router-dom';\n// import Cast from '../components/Cast.js';\n// import Reviews from '../components/Reviews.js';\nimport css from '../pages/MovieDetails.module.css';\nimport Loader from 'components/Loader.js';\n\nconst MovieDetails = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n  // console.log(movieId);\n  const [originalTitle, setOriginalTitle] = useState('');\n  const [releaseDate, setReleaseDate] = useState(0);\n  const [posterPath, setPosterPath] = useState('');\n  const [voteAverage, setVoteAverage] = useState(0);\n  const [overView, setOverView] = useState('');\n  const [genres, setGenres] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    try {\n      fetch(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=356db60679791a010148fefe0790ebd1`\n      )\n        .then(response => {\n          return response.json();\n        })\n        .then(response => {\n          // console.log(response);\n          // setDataMovie(response);\n          setOriginalTitle(response.original_title);\n          setReleaseDate(response.release_date);\n          setReleaseDate(response.release_date);\n          setPosterPath(response.poster_path);\n          setVoteAverage(response.vote_average);\n          setOverView(response.overview);\n          setGenres([...getNormalizedGenres(response.genres)]);\n          // console.log(originalTitle);\n          // console.log('genres', response.genres);\n          // console.log(releaseDate.getFullYear());\n        });\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  }, [movieId]);\n\n  const getNormalizedGenres = array => {\n    return array.map(item => item.name).join(' ');\n  };\n\n  console.log('location', location);\n  \n\n  return (\n    // <>MovieDetails {movieId}</>;\n\n    <div>\n      <Link to={backLinkLocationRef.current}>Go back</Link>\n      {isLoading && <Loader />}\n      <img\n        className={css.img}\n        src={`https://image.tmdb.org/t/p/w500/${posterPath}`}\n        alt={`{originalTitle  }`}\n      />\n      <h1>{originalTitle}</h1>\n      <p>({parseInt(releaseDate)})</p>\n      <p>User score: {`${Math.round(voteAverage * 10)}`}%</p>\n      <p>Overview</p>\n      <p>({overView})</p>\n      <p>Genres</p>\n      <p>({genres})</p>\n      <h2>Additinal information</h2>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews \">Reviews</Link>\n        </li>\n      </ul>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["className","css","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","useState","isLoading","setIsLoading","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","originalTitle","setOriginalTitle","releaseDate","setReleaseDate","posterPath","setPosterPath","voteAverage","setVoteAverage","overView","setOverView","genres","setGenres","useEffect","fetch","then","response","json","original_title","release_date","poster_path","vote_average","overview","getNormalizedGenres","error","array","map","item","name","join","console","log","to","current","Loader","src","alt","parseInt","Math","round"],"sourceRoot":""}