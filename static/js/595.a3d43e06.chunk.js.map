{"version":3,"file":"static/js/595.a3d43e06.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader.module.css?9d64","components/Loader.js","webpack://goit-react-hw-05-movies/./src/pages/Movies.module.css?d157","pages/Movies.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"spiner\":\"Loader_spiner__xTnPT\"};","import { ColorRing } from 'react-loader-spinner';\nimport css from '..//components/Loader.module.css'\n\nconst Loader = () =>{\n    return (\n        <div className={css.spiner}>\n          <p>LOADING...</p>\n          <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"blocks-wrapper\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n          />\n        </div>\n      )\n}\nexport default Loader;","// extracted by mini-css-extract-plugin\nexport default {\"home__text\":\"Movies_home__text__zXe5C\",\"text\":\"Movies_text__+45Um\",\"form__basic\":\"Movies_form__basic__un+bc\",\"input__movie\":\"Movies_input__movie__WnMaB\",\"btn\":\"Movies_btn__CifXa\"};","import { Link, NavLink, useLocation, useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Loader from 'components/Loader';\nimport css from './/Movies.module.css';\n\n\nconst Movies = () => {\n  const [movie, setMovie] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchPharams, setSearchPharams] = useSearchParams();\n  const searchQuery = searchPharams.get('query');\n  console.log('searchQuery searchPharams ', searchQuery);\n  const [movieId, setMovieId] = useState(() => searchQuery || '');\n\n  const location = useLocation();\n  // console.log('movieId', movieId);\n  // console.log('locationMovie', location);\n\n  useEffect(() => {\n    async function fetchMovie() {\n      setIsLoading(true);\n      try {\n        await fetch(\n          `https://api.themoviedb.org/3/search/movie?query=${searchQuery}&api_key=356db60679791a010148fefe0790ebd1`\n        )\n          .then(response => {\n            return response.json();\n          })\n          .then(response => {\n            setMovie([...getNormalized(response.results)]);\n            // console.log('response.results', response.results);\n            // console.log('response', response);\n          });\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovie();\n  }, [searchQuery]);\n\n  const getNormalized = array => {\n    return array.map(({ original_title, id }) => ({ original_title, id }));\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setMovieId(evt.currentTarget.value);\n\n    if (!movieId) {\n      alert('Enter, please, movie....');\n      return;\n    }\n  };\n\n  return (\n    <main>\n      <form onSubmit={handleSubmit} className={css.form__basic}>\n        <input\n          type=\"text\"\n          value={movieId}\n          // onChange={evt => setSearchPharams({ movieId: evt.target.value })}\n          onChange={evt => setSearchPharams(setMovieId(evt.target.value))}\n          className={css.input__movie}\n        />\n        <button\n          type=\"submit\"\n          onClick={() => setSearchPharams({ query: `${movieId}` })}\n          className={css.btn}\n        >\n          Search\n        </button>\n      </form>\n      {error && { error }}\n      {isLoading && <Loader />}\n      <div>\n        <NavLink to=\"/movies\"></NavLink>\n      </div>\n      <ul>\n        {searchQuery ? (\n          movie.map(({ original_title, id }) => {\n            return (\n              <li key={id}>\n                <Link\n                  to={`${id}`}\n                  state={{ from: location }}\n                  className={css.home__text}\n                >\n                  {original_title}\n                </Link>\n              </li>\n            );\n          })\n        ) : (\n          <p className={css.text}>To enter title of the movie, please... </p>\n        )}\n      </ul>\n    </main>\n  );\n};\n\nexport default Movies;\n\n// const Movies = () => {\n//   const [movie, setMovie] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [searchPharams, setSearchPharams] = useSearchParams();\n//   // const movieId = searchPharams.get('movieId' || '');\n//   const [movieId, setMovieId] = useState(\n//     () => searchPharams.get('movieId') || ''\n//   );\n//   const location = useLocation();\n//   // console.log('movieId', movieId);\n//   console.log('locationMovie', location);\n\n//   const getNormalized = array => {\n//     return array.map(({ original_title, id }) => ({ original_title, id }));\n//   };\n\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     setMovieId(evt.currentTarget.value);\n\n//     console.log('set movieId', movieId);\n\n//     if (!movieId) {\n//       alert('Enter, please, movie....');\n//       return;\n//     }\n\n//     async function fetchMovie() {\n//       setIsLoading(true);\n//       try {\n//         await fetch(\n//           `https://api.themoviedb.org/3/search/movie?query=${movieId}&api_key=356db60679791a010148fefe0790ebd1`\n//         )\n//           .then(response => {\n//             return response.json();\n//           })\n//           .then(response => {\n//             setMovie([...getNormalized(response.results)]);\n//             // console.log('response.results', response.results);\n//             // console.log('response', response);\n//           });\n//       } catch (error) {\n//         setError(error.message);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     }\n//     fetchMovie();\n//   };\n\n//   return (\n//     <main>\n//       <form onSubmit={handleSubmit} className={css.form__basic}>\n//         <input\n//           type=\"text\"\n//           value={movieId}\n//           // onChange={evt => setSearchPharams({ movieId: evt.target.value })}\n//           onChange={evt => setSearchPharams(setMovieId(evt.target.value))}\n//           className={css.input__movie}\n//         />\n//         <button\n//           type=\"submit\"\n//           onClick={() => setSearchPharams({ query: `${movieId}` })}\n//           className={css.btn}\n//         >\n//           Search\n//         </button>\n//       </form>\n//       {error && { error }}\n//       {isLoading && <Loader />}\n//       <div>\n//         <NavLink to=\"/movies\"></NavLink>\n//       </div>\n//       <ul>\n//         {movie.map(({ original_title, id }) => {\n//           return (\n//             <li key={id}>\n//               <Link to={`${id}`} state={{ from: location}} className={css.home__text}>\n//                 {original_title}\n//               </Link>\n//             </li>\n//           );\n//         })}\n//       </ul>\n//     </main>\n//   );\n// };\n\n// export default Movies;\n\n\n\n// const Movies = () => {\n//   const [movie, setMovie] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [searchPharams, setSearchPharams] = useSearchParams();\n\n//   // const movieId = searchPharams.get('movieId' || '');\n//   const [movieId, setMovieId] = useState(null);\n\n//     // () => searchPharams.get('movieId') || '');\n//   const location = useLocation();\n//   console.log('movieId', movieId);\n//   console.log('locationMovie', location);\n\n//   const getNormalized = array => {\n//     return array.map(({ original_title, id }) => ({ original_title, id }));\n//   };\n\n//   useEffect(() => {\n//     const searchParams = new URLSearchParams(window.location.search);\n//     const query = searchParams.get(\"query\");\n\n//     async function fetchMovie() {\n//       setIsLoading(true);\n//       try {\n//         await fetch(\n//           `https://api.themoviedb.org/3/search/movie?query=${movieId}&api_key=356db60679791a010148fefe0790ebd1`\n//         )\n//           .then(response => {\n//             return response.json();\n//           })\n//           .then(response => {\n//             // setMovie([...response.results]);\n//             setMovie([...getNormalized(response.results)]);\n//             // console.log('response.results', response.results);\n//             // console.log('response', response);\n//           });\n//       } catch (error) {\n//         setError(error.message);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     }\n//     fetchMovie();\n//   }, [window.location.search]);\n\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     setMovieId(evt.currentTarget.value);\n\n//     console.log('set movieId', movieId);\n\n//     if (!movieId) {\n//       alert('Enter, please, movie....');\n//       return;\n//     }\n\n//     // async function fetchMovie() {\n//     //   setIsLoading(true);\n//     //   try {\n//     //     await fetch(\n//     //       `https://api.themoviedb.org/3/search/movie?query=${movieId}&api_key=356db60679791a010148fefe0790ebd1`\n//     //     )\n//     //       .then(response => {\n//     //         return response.json();\n//     //       })\n//     //       .then(response => {\n//     //         setMovie([...getNormalized(response.results)]);\n//     //         // console.log('response.results', response.results);\n//     //         // console.log('response', response);\n//     //       });\n//     //   } catch (error) {\n//     //     setError(error.message);\n//     //   } finally {\n//     //     setIsLoading(false);\n//     //   }\n//     // }\n//     // fetchMovie();\n//   };\n\n//   return (\n//     <main>\n//       <form onSubmit={handleSubmit} className={css.form__basic}>\n//         <input\n//           type=\"text\"\n//           value={movieId}\n//           // onChange={evt => setSearchPharams({ movieId: evt.target.value })}\n//           onChange={(evt) => setMovieId(setMovieId(evt.target.value))}\n//           className={css.input__movie}\n//         />\n//         <button\n//           type=\"submit\"\n//           onClick={() => window.location.reload()}\n//           className={css.btn}\n//         >\n//           Search\n//         </button>\n//       </form>\n//       {error && { error }}\n//       {isLoading && <Loader />}\n//       <div>\n//         <NavLink to=\"/movies\"></NavLink>\n//       </div>\n//       <ul>\n//         {movie.map(({ original_title, id }) => {\n//           return (\n//             <li key={id}>\n//               <Link to={`${id}`} state={{ from: location}} className={css.home__text}>\n//                 {original_title}\n//               </Link>\n//             </li>\n//           );\n//         })}\n//       </ul>\n//     </main>\n//   );\n// };\n\n// export default Movies;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["className","css","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","useState","movie","setMovie","error","setError","isLoading","setIsLoading","useSearchParams","searchPharams","setSearchPharams","searchQuery","get","console","log","movieId","setMovieId","location","useLocation","useEffect","fetch","then","response","json","getNormalized","results","message","fetchMovie","array","map","original_title","id","onSubmit","evt","preventDefault","currentTarget","value","alert","type","onChange","target","onClick","query","Loader","to","state","from","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}